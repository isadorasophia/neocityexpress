/*             |￣￣￣￣￣￣\                                                                  *
 *             |    STOP   |                                                                 *
 *             |   EDITING |                                                                 *
 *             |    THIS   |                                                                 *
 *             |    FILE   |                                                                 *
 *             | ＿＿＿＿＿ /                                                                 *
 *             (\__/)  ||                                                                    *
 *             (•ㅅ•)  ||                                                                    *
 *             / 　 づ                                                                       *
 *             ￣￣￣                                                                         *
 * This code was generated by our own generator! In order to modify this, please run the     *
 * generator with whatever settings you want.                                                *
 *                                                                                           */

using Murder.Components;
using Murder.Components.Agents;
using Murder.Components.Cutscenes;
using Murder.Components.Effects;
using Bang.Interactions;
using Murder.Components.Graphics;
using Bang.StateMachines;
using Bang.Components;
using LDGame.Components;
using LDGame.Systems.Cars;
using Murder.StateMachines;
using Murder.Interactions;
using LDGame.StateMachines;
using LDGame.StateMachines.Menu;
using LDGame.Systems.Interactions;
using LDGame.Interactions;
using Murder.Messages;
using Murder.Messages.Physics;
using LDGame.Messages;
using System.Collections.Immutable;

namespace Bang.Entities
{
    public enum LDGameComponentType
    {
        AvoidCarOnTrigger = 110,
        Boost = 111,
        Car = 112,
        CarEngine = 113,
        CarEngineStopped = 114,
        CarLevelManager = 115,
        CellphoneLine = 116,
        DayCycle = 117,
        DriverPortrait = 118,
        Enemy = 119,
        GuestPortrait = 120,
        IncomingCollision = 121,
        InteractOnButtonPress = 122,
        Monologue = 123,
        Paused = 124,
        Player = 125,
        PlayerSpeed = 126,
        RelativeVelocity = 127,
        RemoveAfterTrackedTriggeredEventIsGone = 128,
        ScrollingSprite = 129,
        SuddenStop = 130,
        TriggeredEventTracker = 131
    }

    public enum LDGameMessageType
    {
        AgentInput = 132,
        AgentReleaseInput = 133,
        CarCollision = 134,
        Dialogue = 135,
        TargetEntity = 136,
        Text = 137
    }

    public static class LDGameEntityExtensions
    {
        #region Component "Get" methods!
        public static AvoidCarOnTriggerComponent GetAvoidCarOnTrigger(this Entity e)
        {
            return e.GetComponent<AvoidCarOnTriggerComponent>(110);
        }

        public static BoostComponent GetBoost(this Entity e)
        {
            return e.GetComponent<BoostComponent>(111);
        }

        internal static CarComponent GetCar(this Entity e)
        {
            return e.GetComponent<CarComponent>(112);
        }

        internal static CarEngineComponent GetCarEngine(this Entity e)
        {
            return e.GetComponent<CarEngineComponent>(113);
        }

        public static CarEngineStoppedComponent GetCarEngineStopped(this Entity e)
        {
            return e.GetComponent<CarEngineStoppedComponent>(114);
        }

        public static CarLevelManagerComponent GetCarLevelManager(this Entity e)
        {
            return e.GetComponent<CarLevelManagerComponent>(115);
        }

        public static CellphoneLineComponent GetCellphoneLine(this Entity e)
        {
            return e.GetComponent<CellphoneLineComponent>(116);
        }

        public static DayCycleComponent GetDayCycle(this Entity e)
        {
            return e.GetComponent<DayCycleComponent>(117);
        }

        internal static DriverPortraitComponent GetDriverPortrait(this Entity e)
        {
            return e.GetComponent<DriverPortraitComponent>(118);
        }

        public static EnemyComponent GetEnemy(this Entity e)
        {
            return e.GetComponent<EnemyComponent>(119);
        }

        internal static GuestPortraitComponent GetGuestPortrait(this Entity e)
        {
            return e.GetComponent<GuestPortraitComponent>(120);
        }

        public static IncomingCollisionComponent GetIncomingCollision(this Entity e)
        {
            return e.GetComponent<IncomingCollisionComponent>(121);
        }

        public static InteractOnButtonPressComponent GetInteractOnButtonPress(this Entity e)
        {
            return e.GetComponent<InteractOnButtonPressComponent>(122);
        }

        public static MonologueComponent GetMonologue(this Entity e)
        {
            return e.GetComponent<MonologueComponent>(123);
        }

        public static PausedComponent GetPaused(this Entity e)
        {
            return e.GetComponent<PausedComponent>(124);
        }

        public static PlayerComponent GetPlayer(this Entity e)
        {
            return e.GetComponent<PlayerComponent>(125);
        }

        public static PlayerSpeedComponent GetPlayerSpeed(this Entity e)
        {
            return e.GetComponent<PlayerSpeedComponent>(126);
        }

        internal static RelativeVelocityComponent GetRelativeVelocity(this Entity e)
        {
            return e.GetComponent<RelativeVelocityComponent>(127);
        }

        internal static RemoveAfterTrackedTriggeredEventIsGoneComponent GetRemoveAfterTrackedTriggeredEventIsGone(this Entity e)
        {
            return e.GetComponent<RemoveAfterTrackedTriggeredEventIsGoneComponent>(128);
        }

        public static ScrollingSprite GetScrollingSprite(this Entity e)
        {
            return e.GetComponent<ScrollingSprite>(129);
        }

        public static SuddenStopComponent GetSuddenStop(this Entity e)
        {
            return e.GetComponent<SuddenStopComponent>(130);
        }

        public static TriggeredEventTrackerComponent GetTriggeredEventTracker(this Entity e)
        {
            return e.GetComponent<TriggeredEventTrackerComponent>(131);
        }

        #endregion
        
        #region Component "Has" checkers!
        public static bool HasAvoidCarOnTrigger(this Entity e)
        {
            return e.HasComponent(110);
        }

        public static bool HasBoost(this Entity e)
        {
            return e.HasComponent(111);
        }

        internal static bool HasCar(this Entity e)
        {
            return e.HasComponent(112);
        }

        internal static bool HasCarEngine(this Entity e)
        {
            return e.HasComponent(113);
        }

        public static bool HasCarEngineStopped(this Entity e)
        {
            return e.HasComponent(114);
        }

        public static bool HasCarLevelManager(this Entity e)
        {
            return e.HasComponent(115);
        }

        public static bool HasCellphoneLine(this Entity e)
        {
            return e.HasComponent(116);
        }

        public static bool HasDayCycle(this Entity e)
        {
            return e.HasComponent(117);
        }

        internal static bool HasDriverPortrait(this Entity e)
        {
            return e.HasComponent(118);
        }

        public static bool HasEnemy(this Entity e)
        {
            return e.HasComponent(119);
        }

        internal static bool HasGuestPortrait(this Entity e)
        {
            return e.HasComponent(120);
        }

        public static bool HasIncomingCollision(this Entity e)
        {
            return e.HasComponent(121);
        }

        public static bool HasInteractOnButtonPress(this Entity e)
        {
            return e.HasComponent(122);
        }

        public static bool HasMonologue(this Entity e)
        {
            return e.HasComponent(123);
        }

        public static bool HasPaused(this Entity e)
        {
            return e.HasComponent(124);
        }

        public static bool HasPlayer(this Entity e)
        {
            return e.HasComponent(125);
        }

        public static bool HasPlayerSpeed(this Entity e)
        {
            return e.HasComponent(126);
        }

        internal static bool HasRelativeVelocity(this Entity e)
        {
            return e.HasComponent(127);
        }

        internal static bool HasRemoveAfterTrackedTriggeredEventIsGone(this Entity e)
        {
            return e.HasComponent(128);
        }

        public static bool HasScrollingSprite(this Entity e)
        {
            return e.HasComponent(129);
        }

        public static bool HasSuddenStop(this Entity e)
        {
            return e.HasComponent(130);
        }

        public static bool HasTriggeredEventTracker(this Entity e)
        {
            return e.HasComponent(131);
        }

        #endregion
        
        #region Component "TryGet" methods!
        public static AvoidCarOnTriggerComponent? TryGetAvoidCarOnTrigger(this Entity e)
        {
            if (!e.HasAvoidCarOnTrigger())
            {
                return null;
            }

            return e.GetAvoidCarOnTrigger();
        }

        public static BoostComponent? TryGetBoost(this Entity e)
        {
            if (!e.HasBoost())
            {
                return null;
            }

            return e.GetBoost();
        }

        internal static CarComponent? TryGetCar(this Entity e)
        {
            if (!e.HasCar())
            {
                return null;
            }

            return e.GetCar();
        }

        internal static CarEngineComponent? TryGetCarEngine(this Entity e)
        {
            if (!e.HasCarEngine())
            {
                return null;
            }

            return e.GetCarEngine();
        }

        public static CarEngineStoppedComponent? TryGetCarEngineStopped(this Entity e)
        {
            if (!e.HasCarEngineStopped())
            {
                return null;
            }

            return e.GetCarEngineStopped();
        }

        public static CarLevelManagerComponent? TryGetCarLevelManager(this Entity e)
        {
            if (!e.HasCarLevelManager())
            {
                return null;
            }

            return e.GetCarLevelManager();
        }

        public static CellphoneLineComponent? TryGetCellphoneLine(this Entity e)
        {
            if (!e.HasCellphoneLine())
            {
                return null;
            }

            return e.GetCellphoneLine();
        }

        public static DayCycleComponent? TryGetDayCycle(this Entity e)
        {
            if (!e.HasDayCycle())
            {
                return null;
            }

            return e.GetDayCycle();
        }

        internal static DriverPortraitComponent? TryGetDriverPortrait(this Entity e)
        {
            if (!e.HasDriverPortrait())
            {
                return null;
            }

            return e.GetDriverPortrait();
        }

        public static EnemyComponent? TryGetEnemy(this Entity e)
        {
            if (!e.HasEnemy())
            {
                return null;
            }

            return e.GetEnemy();
        }

        internal static GuestPortraitComponent? TryGetGuestPortrait(this Entity e)
        {
            if (!e.HasGuestPortrait())
            {
                return null;
            }

            return e.GetGuestPortrait();
        }

        public static IncomingCollisionComponent? TryGetIncomingCollision(this Entity e)
        {
            if (!e.HasIncomingCollision())
            {
                return null;
            }

            return e.GetIncomingCollision();
        }

        public static InteractOnButtonPressComponent? TryGetInteractOnButtonPress(this Entity e)
        {
            if (!e.HasInteractOnButtonPress())
            {
                return null;
            }

            return e.GetInteractOnButtonPress();
        }

        public static MonologueComponent? TryGetMonologue(this Entity e)
        {
            if (!e.HasMonologue())
            {
                return null;
            }

            return e.GetMonologue();
        }

        public static PausedComponent? TryGetPaused(this Entity e)
        {
            if (!e.HasPaused())
            {
                return null;
            }

            return e.GetPaused();
        }

        public static PlayerComponent? TryGetPlayer(this Entity e)
        {
            if (!e.HasPlayer())
            {
                return null;
            }

            return e.GetPlayer();
        }

        public static PlayerSpeedComponent? TryGetPlayerSpeed(this Entity e)
        {
            if (!e.HasPlayerSpeed())
            {
                return null;
            }

            return e.GetPlayerSpeed();
        }

        internal static RelativeVelocityComponent? TryGetRelativeVelocity(this Entity e)
        {
            if (!e.HasRelativeVelocity())
            {
                return null;
            }

            return e.GetRelativeVelocity();
        }

        internal static RemoveAfterTrackedTriggeredEventIsGoneComponent? TryGetRemoveAfterTrackedTriggeredEventIsGone(this Entity e)
        {
            if (!e.HasRemoveAfterTrackedTriggeredEventIsGone())
            {
                return null;
            }

            return e.GetRemoveAfterTrackedTriggeredEventIsGone();
        }

        public static ScrollingSprite? TryGetScrollingSprite(this Entity e)
        {
            if (!e.HasScrollingSprite())
            {
                return null;
            }

            return e.GetScrollingSprite();
        }

        public static SuddenStopComponent? TryGetSuddenStop(this Entity e)
        {
            if (!e.HasSuddenStop())
            {
                return null;
            }

            return e.GetSuddenStop();
        }

        public static TriggeredEventTrackerComponent? TryGetTriggeredEventTracker(this Entity e)
        {
            if (!e.HasTriggeredEventTracker())
            {
                return null;
            }

            return e.GetTriggeredEventTracker();
        }

        #endregion
        
        #region Component "Set" methods!
        public static void SetAvoidCarOnTrigger(this Entity e, AvoidCarOnTriggerComponent component)
        {
            e.AddOrReplaceComponent(component, 110);
        }

        public static void SetAvoidCarOnTrigger(this Entity e)
        {
            e.AddOrReplaceComponent(new AvoidCarOnTriggerComponent(), 110);
        }

        public static void SetBoost(this Entity e, BoostComponent component)
        {
            e.AddOrReplaceComponent(component, 111);
        }

        public static void SetBoost(this Entity e, System.Single when)
        {
            e.AddOrReplaceComponent(new BoostComponent(when), 111);
        }

        public static void SetBoost(this Entity e)
        {
            e.AddOrReplaceComponent(new BoostComponent(), 111);
        }

        internal static void SetCar(this Entity e, CarComponent component)
        {
            e.AddOrReplaceComponent(component, 112);
        }

        internal static void SetCar(this Entity e)
        {
            e.AddOrReplaceComponent(new CarComponent(), 112);
        }

        internal static void SetCarEngine(this Entity e, CarEngineComponent component)
        {
            e.AddOrReplaceComponent(component, 113);
        }

        internal static void SetCarEngine(this Entity e, Murder.Core.Geometry.Vector2 desiredSpeed, System.Single lerpAmount)
        {
            e.AddOrReplaceComponent(new CarEngineComponent(desiredSpeed, lerpAmount), 113);
        }

        internal static void SetCarEngine(this Entity e)
        {
            e.AddOrReplaceComponent(new CarEngineComponent(), 113);
        }

        public static void SetCarEngineStopped(this Entity e, CarEngineStoppedComponent component)
        {
            e.AddOrReplaceComponent(component, 114);
        }

        public static void SetCarEngineStopped(this Entity e)
        {
            e.AddOrReplaceComponent(new CarEngineStoppedComponent(), 114);
        }

        public static void SetCarEngineStopped(this Entity e, System.Single stopUntil)
        {
            e.AddOrReplaceComponent(new CarEngineStoppedComponent(stopUntil), 114);
        }

        public static void SetCarLevelManager(this Entity e, CarLevelManagerComponent component)
        {
            e.AddOrReplaceComponent(component, 115);
        }

        public static void SetCarLevelManager(this Entity e)
        {
            e.AddOrReplaceComponent(new CarLevelManagerComponent(), 115);
        }

        public static void SetCellphoneLine(this Entity e, CellphoneLineComponent component)
        {
            e.AddOrReplaceComponent(component, 116);
        }

        public static void SetCellphoneLine(this Entity e, Murder.Core.Dialogs.Line line, System.Single start)
        {
            e.AddOrReplaceComponent(new CellphoneLineComponent(line, start), 116);
        }

        public static void SetCellphoneLine(this Entity e, Murder.Core.Dialogs.Line line, System.Single start, System.String owner)
        {
            e.AddOrReplaceComponent(new CellphoneLineComponent(line, start, owner), 116);
        }

        public static void SetCellphoneLine(this Entity e, System.String line, System.Collections.Immutable.ImmutableArray<System.String> choices, System.Single start, System.String owner)
        {
            e.AddOrReplaceComponent(new CellphoneLineComponent(line, choices, start, owner), 116);
        }

        public static void SetCellphoneLine(this Entity e)
        {
            e.AddOrReplaceComponent(new CellphoneLineComponent(), 116);
        }

        public static void SetDayCycle(this Entity e, DayCycleComponent component)
        {
            e.AddOrReplaceComponent(component, 117);
        }

        public static void SetDayCycle(this Entity e)
        {
            e.AddOrReplaceComponent(new DayCycleComponent(), 117);
        }

        public static void SetDayCycle(this Entity e, System.Guid day)
        {
            e.AddOrReplaceComponent(new DayCycleComponent(day), 117);
        }

        internal static void SetDriverPortrait(this Entity e, DriverPortraitComponent component)
        {
            e.AddOrReplaceComponent(component, 118);
        }

        internal static void SetDriverPortrait(this Entity e)
        {
            e.AddOrReplaceComponent(new DriverPortraitComponent(), 118);
        }

        internal static void SetDriverPortrait(this Entity e, Murder.Core.Portrait portrait)
        {
            e.AddOrReplaceComponent(new DriverPortraitComponent(portrait), 118);
        }

        public static void SetEnemy(this Entity e, EnemyComponent component)
        {
            e.AddOrReplaceComponent(component, 119);
        }

        public static void SetEnemy(this Entity e)
        {
            e.AddOrReplaceComponent(new EnemyComponent(), 119);
        }

        internal static void SetGuestPortrait(this Entity e, GuestPortraitComponent component)
        {
            e.AddOrReplaceComponent(component, 120);
        }

        internal static void SetGuestPortrait(this Entity e)
        {
            e.AddOrReplaceComponent(new GuestPortraitComponent(), 120);
        }

        internal static void SetGuestPortrait(this Entity e, Murder.Core.Portrait portrait)
        {
            e.AddOrReplaceComponent(new GuestPortraitComponent(portrait), 120);
        }

        public static void SetIncomingCollision(this Entity e, IncomingCollisionComponent component)
        {
            e.AddOrReplaceComponent(component, 121);
        }

        public static void SetIncomingCollision(this Entity e)
        {
            e.AddOrReplaceComponent(new IncomingCollisionComponent(), 121);
        }

        public static void SetIncomingCollision(this Entity e, System.Single when)
        {
            e.AddOrReplaceComponent(new IncomingCollisionComponent(when), 121);
        }

        public static void SetInteractOnButtonPress(this Entity e, InteractOnButtonPressComponent component)
        {
            e.AddOrReplaceComponent(component, 122);
        }

        public static void SetInteractOnButtonPress(this Entity e)
        {
            e.AddOrReplaceComponent(new InteractOnButtonPressComponent(), 122);
        }

        public static void SetInteractOnButtonPress(this Entity e, System.Boolean highlightOnRange)
        {
            e.AddOrReplaceComponent(new InteractOnButtonPressComponent(highlightOnRange), 122);
        }

        public static void SetInteractOnButtonPress(this Entity e, System.Int32 priority, System.Boolean highlightOnRange)
        {
            e.AddOrReplaceComponent(new InteractOnButtonPressComponent(priority, highlightOnRange), 122);
        }

        public static void SetMonologue(this Entity e, MonologueComponent component)
        {
            e.AddOrReplaceComponent(component, 123);
        }

        public static void SetMonologue(this Entity e, Murder.Core.Dialogs.Line line, LDGame.StateMachines.InputType inputType)
        {
            e.AddOrReplaceComponent(new MonologueComponent(line, inputType), 123);
        }

        public static void SetMonologue(this Entity e, System.String line, System.Collections.Immutable.ImmutableArray<System.String> choices, LDGame.StateMachines.InputType inputType)
        {
            e.AddOrReplaceComponent(new MonologueComponent(line, choices, inputType), 123);
        }

        public static void SetMonologue(this Entity e)
        {
            e.AddOrReplaceComponent(new MonologueComponent(), 123);
        }

        public static void SetPaused(this Entity e, PausedComponent component)
        {
            e.AddOrReplaceComponent(component, 124);
        }

        public static void SetPaused(this Entity e)
        {
            e.AddOrReplaceComponent(new PausedComponent(), 124);
        }

        public static void SetPlayer(this Entity e, PlayerComponent component)
        {
            e.AddOrReplaceComponent(component, 125);
        }

        public static void SetPlayer(this Entity e, LDGame.Components.PlayerStates state)
        {
            e.AddOrReplaceComponent(new PlayerComponent(state), 125);
        }

        public static void SetPlayer(this Entity e)
        {
            e.AddOrReplaceComponent(new PlayerComponent(), 125);
        }

        public static void SetPlayerSpeed(this Entity e, PlayerSpeedComponent component)
        {
            e.AddOrReplaceComponent(component, 126);
        }

        public static void SetPlayerSpeed(this Entity e)
        {
            e.AddOrReplaceComponent(new PlayerSpeedComponent(), 126);
        }

        public static void SetPlayerSpeed(this Entity e, System.Single speed)
        {
            e.AddOrReplaceComponent(new PlayerSpeedComponent(speed), 126);
        }

        internal static void SetRelativeVelocity(this Entity e, RelativeVelocityComponent component)
        {
            e.AddOrReplaceComponent(component, 127);
        }

        internal static void SetRelativeVelocity(this Entity e, Murder.Core.Geometry.Vector2 velocity)
        {
            e.AddOrReplaceComponent(new RelativeVelocityComponent(velocity), 127);
        }

        internal static void SetRelativeVelocity(this Entity e, System.Single x, System.Single y)
        {
            e.AddOrReplaceComponent(new RelativeVelocityComponent(x, y), 127);
        }

        internal static void SetRelativeVelocity(this Entity e)
        {
            e.AddOrReplaceComponent(new RelativeVelocityComponent(), 127);
        }

        internal static void SetRemoveAfterTrackedTriggeredEventIsGone(this Entity e, RemoveAfterTrackedTriggeredEventIsGoneComponent component)
        {
            e.AddOrReplaceComponent(component, 128);
        }

        internal static void SetRemoveAfterTrackedTriggeredEventIsGone(this Entity e)
        {
            e.AddOrReplaceComponent(new RemoveAfterTrackedTriggeredEventIsGoneComponent(), 128);
        }

        public static void SetScrollingSprite(this Entity e, ScrollingSprite component)
        {
            e.AddOrReplaceComponent(component, 129);
        }

        public static void SetScrollingSprite(this Entity e)
        {
            e.AddOrReplaceComponent(new ScrollingSprite(), 129);
        }

        public static void SetSuddenStop(this Entity e, SuddenStopComponent component)
        {
            e.AddOrReplaceComponent(component, 130);
        }

        public static void SetSuddenStop(this Entity e, System.Single when)
        {
            e.AddOrReplaceComponent(new SuddenStopComponent(when), 130);
        }

        public static void SetSuddenStop(this Entity e)
        {
            e.AddOrReplaceComponent(new SuddenStopComponent(), 130);
        }

        public static void SetTriggeredEventTracker(this Entity e, TriggeredEventTrackerComponent component)
        {
            e.AddOrReplaceComponent(component, 131);
        }

        public static void SetTriggeredEventTracker(this Entity e)
        {
            e.AddOrReplaceComponent(new TriggeredEventTrackerComponent(), 131);
        }

        public static void SetTriggeredEventTracker(this Entity e, LDGame.Components.TriggeredEventTrackerKind kind, System.Single limit)
        {
            e.AddOrReplaceComponent(new TriggeredEventTrackerComponent(kind, limit), 131);
        }

        #endregion
        
        #region Component "Remove" methods!
        public static bool RemoveAvoidCarOnTrigger(this Entity e)
        {
            return e.RemoveComponent(110);
        }

        public static bool RemoveBoost(this Entity e)
        {
            return e.RemoveComponent(111);
        }

        internal static bool RemoveCar(this Entity e)
        {
            return e.RemoveComponent(112);
        }

        internal static bool RemoveCarEngine(this Entity e)
        {
            return e.RemoveComponent(113);
        }

        public static bool RemoveCarEngineStopped(this Entity e)
        {
            return e.RemoveComponent(114);
        }

        public static bool RemoveCarLevelManager(this Entity e)
        {
            return e.RemoveComponent(115);
        }

        public static bool RemoveCellphoneLine(this Entity e)
        {
            return e.RemoveComponent(116);
        }

        public static bool RemoveDayCycle(this Entity e)
        {
            return e.RemoveComponent(117);
        }

        internal static bool RemoveDriverPortrait(this Entity e)
        {
            return e.RemoveComponent(118);
        }

        public static bool RemoveEnemy(this Entity e)
        {
            return e.RemoveComponent(119);
        }

        internal static bool RemoveGuestPortrait(this Entity e)
        {
            return e.RemoveComponent(120);
        }

        public static bool RemoveIncomingCollision(this Entity e)
        {
            return e.RemoveComponent(121);
        }

        public static bool RemoveInteractOnButtonPress(this Entity e)
        {
            return e.RemoveComponent(122);
        }

        public static bool RemoveMonologue(this Entity e)
        {
            return e.RemoveComponent(123);
        }

        public static bool RemovePaused(this Entity e)
        {
            return e.RemoveComponent(124);
        }

        public static bool RemovePlayer(this Entity e)
        {
            return e.RemoveComponent(125);
        }

        public static bool RemovePlayerSpeed(this Entity e)
        {
            return e.RemoveComponent(126);
        }

        internal static bool RemoveRelativeVelocity(this Entity e)
        {
            return e.RemoveComponent(127);
        }

        internal static bool RemoveRemoveAfterTrackedTriggeredEventIsGone(this Entity e)
        {
            return e.RemoveComponent(128);
        }

        public static bool RemoveScrollingSprite(this Entity e)
        {
            return e.RemoveComponent(129);
        }

        public static bool RemoveSuddenStop(this Entity e)
        {
            return e.RemoveComponent(130);
        }

        public static bool RemoveTriggeredEventTracker(this Entity e)
        {
            return e.RemoveComponent(131);
        }

        #endregion

        #region Message "Has" checkers!
        internal static bool HasAgentInputMessage(this Entity e)
        {
            return e.HasMessage(132);
        }

        internal static bool HasAgentReleaseInputMessage(this Entity e)
        {
            return e.HasMessage(133);
        }

        public static bool HasCarCollisionMessage(this Entity e)
        {
            return e.HasMessage(134);
        }

        internal static bool HasDialogueMessage(this Entity e)
        {
            return e.HasMessage(135);
        }

        internal static bool HasTargetEntityMessage(this Entity e)
        {
            return e.HasMessage(136);
        }

        internal static bool HasTextMessage(this Entity e)
        {
            return e.HasMessage(137);
        }

        #endregion
    }

    public class LDGameLookupImplementation : MurderLookupImplementation
    {
        private static readonly ImmutableHashSet<int> _relativeComponents = new HashSet<int>()
        {
            70,
            95,
            95
        }.ToImmutableHashSet();

        public override ImmutableHashSet<int> RelativeComponents => _relativeComponents;

        private static readonly ImmutableDictionary<Type, int> _componentsIndex = new Dictionary<Type, int>()
        {
            { typeof(AdvancedCollisionComponent), 0 },
            { typeof(AgentComponent), 1 },
            { typeof(AgentImpulseComponent), 2 },
            { typeof(AgentSpeedMultiplier), 3 },
            { typeof(AgentSpeedOverride), 4 },
            { typeof(AgentSpriteComponent), 5 },
            { typeof(AlphaComponent), 6 },
            { typeof(AnimationCompleteComponent), 7 },
            { typeof(AnimationOverloadComponent), 8 },
            { typeof(AnimationSpeedOverload), 9 },
            { typeof(CameraFollowComponent), 10 },
            { typeof(CarveComponent), 11 },
            { typeof(ChoiceComponent), 12 },
            { typeof(ColliderComponent), 13 },
            { typeof(CollisionCacheComponent), 14 },
            { typeof(CustomCollisionMask), 15 },
            { typeof(CustomDrawComponent), 16 },
            { typeof(CustomTargetSpriteBatchComponent), 17 },
            { typeof(CutsceneAnchorsComponent), 18 },
            { typeof(DestroyAtTimeComponent), 19 },
            { typeof(DestroyOnAnimationCompleteComponent), 20 },
            { typeof(DestroyOnBlackboardConditionComponent), 21 },
            { typeof(DestroyOnCollisionComponent), 22 },
            { typeof(DisableAgentComponent), 23 },
            { typeof(DisableEntityComponent), 24 },
            { typeof(DisableParticleSystemComponent), 25 },
            { typeof(DoNotPauseComponent), 26 },
            { typeof(DrawRectangleComponent), 27 },
            { typeof(EntityTrackerComponent), 28 },
            { typeof(FacingComponent), 29 },
            { typeof(FadeScreenComponent), 30 },
            { typeof(FadeTransitionComponent), 31 },
            { typeof(FadeWhenInAreaComponent), 32 },
            { typeof(FlashSpriteComponent), 33 },
            { typeof(FreezeWorldComponent), 34 },
            { typeof(FrictionComponent), 35 },
            { typeof(GlobalShaderComponent), 36 },
            { typeof(GuidToIdTargetCollectionComponent), 37 },
            { typeof(GuidToIdTargetComponent), 38 },
            { typeof(HAAStarPathfindComponent), 39 },
            { typeof(HasVisionComponent), 40 },
            { typeof(HighlightSpriteComponent), 41 },
            { typeof(IdTargetCollectionComponent), 42 },
            { typeof(IdTargetComponent), 43 },
            { typeof(IgnoreTriggersUntilComponent), 44 },
            { typeof(IndestructibleComponent), 45 },
            { typeof(InstanceToEntityLookupComponent), 46 },
            { typeof(InteractOnCollisionComponent), 47 },
            { typeof(InteractOnRuleMatchCollectionComponent), 48 },
            { typeof(InteractOnRuleMatchComponent), 49 },
            { typeof(InteractOnStartComponent), 50 },
            { typeof(InteractorComponent), 51 },
            { typeof(LineComponent), 52 },
            { typeof(MapComponent), 53 },
            { typeof(MoveToComponent), 54 },
            { typeof(MoveToPerfectComponent), 55 },
            { typeof(MusicComponent), 56 },
            { typeof(ParallaxComponent), 57 },
            { typeof(ParticleSystemComponent), 58 },
            { typeof(ParticleSystemWorldTrackerComponent), 59 },
            { typeof(PathfindComponent), 60 },
            { typeof(PauseAnimationComponent), 61 },
            { typeof(PickEntityToAddOnStartComponent), 62 },
            { typeof(PolygonSpriteComponent), 63 },
            { typeof(PrefabRefComponent), 64 },
            { typeof(PushAwayComponent), 65 },
            { typeof(QuadtreeComponent), 66 },
            { typeof(QuestTrackerComponent), 67 },
            { typeof(QuestTrackerRuntimeComponent), 68 },
            { typeof(RandomizeSpriteComponent), 69 },
            { typeof(RectPositionComponent), 70 },
            { typeof(RemoveColliderWhenStoppedComponent), 71 },
            { typeof(RemoveEntityOnRuleMatchAtLoadComponent), 72 },
            { typeof(RequiresVisionComponent), 73 },
            { typeof(RoomComponent), 74 },
            { typeof(RotateComponent), 75 },
            { typeof(RouteComponent), 76 },
            { typeof(RuleWatcherComponent), 77 },
            { typeof(SituationComponent), 78 },
            { typeof(SoundComponent), 79 },
            { typeof(SoundParameterComponent), 80 },
            { typeof(SpeakerComponent), 81 },
            { typeof(SpriteComponent), 82 },
            { typeof(StrafingComponent), 83 },
            { typeof(TextBoxComponent), 84 },
            { typeof(TextureComponent), 85 },
            { typeof(ThreeSliceComponent), 86 },
            { typeof(TileGridComponent), 87 },
            { typeof(TilesetComponent), 88 },
            { typeof(VelocityComponent), 89 },
            { typeof(VerticalPositionComponent), 90 },
            { typeof(WaitForVacancyComponent), 91 },
            { typeof(WindowRefreshTrackerComponent), 92 },
            { typeof(IStateMachineComponent), 93 },
            { typeof(IInteractiveComponent), 94 },
            { typeof(IMurderTransformComponent), 95 },
            { typeof(ITransformComponent), 95 },
            { typeof(AvoidCarOnTriggerComponent), 110 },
            { typeof(BoostComponent), 111 },
            { typeof(CarComponent), 112 },
            { typeof(CarEngineComponent), 113 },
            { typeof(CarEngineStoppedComponent), 114 },
            { typeof(CarLevelManagerComponent), 115 },
            { typeof(CellphoneLineComponent), 116 },
            { typeof(DayCycleComponent), 117 },
            { typeof(DriverPortraitComponent), 118 },
            { typeof(EnemyComponent), 119 },
            { typeof(GuestPortraitComponent), 120 },
            { typeof(IncomingCollisionComponent), 121 },
            { typeof(InteractOnButtonPressComponent), 122 },
            { typeof(MonologueComponent), 123 },
            { typeof(PausedComponent), 124 },
            { typeof(PlayerComponent), 125 },
            { typeof(PlayerSpeedComponent), 126 },
            { typeof(RelativeVelocityComponent), 127 },
            { typeof(RemoveAfterTrackedTriggeredEventIsGoneComponent), 128 },
            { typeof(ScrollingSprite), 129 },
            { typeof(SuddenStopComponent), 130 },
            { typeof(TriggeredEventTrackerComponent), 131 },
            { typeof(StateMachineComponent<Coroutine>), 93 },
            { typeof(StateMachineComponent<DialogStateMachine>), 93 },
            { typeof(InteractiveComponent<AddComponentOnInteraction>), 94 },
            { typeof(InteractiveComponent<AddEntityOnInteraction>), 94 },
            { typeof(InteractiveComponent<AdvancedBlackboardInteraction>), 94 },
            { typeof(InteractiveComponent<BlackboardActionInteraction>), 94 },
            { typeof(InteractiveComponent<DebugInteraction>), 94 },
            { typeof(InteractiveComponent<InteractionCollection>), 94 },
            { typeof(InteractiveComponent<RemoveEntityOnInteraction>), 94 },
            { typeof(InteractiveComponent<SendToOtherInteraction>), 94 },
            { typeof(InteractiveComponent<SetPositionInteraction>), 94 },
            { typeof(InteractiveComponent<TalkToInteraction>), 94 },
            { typeof(PositionComponent), 95 },
            { typeof(PositionRotationComponent), 95 },
            { typeof(StateMachineComponent<CarsLevelManager>), 93 },
            { typeof(StateMachineComponent<CellphoneStateMachine>), 93 },
            { typeof(StateMachineComponent<DeliveryStatsStateMachine>), 93 },
            { typeof(StateMachineComponent<DispatchEventsBeforeDrivingStateMachine>), 93 },
            { typeof(StateMachineComponent<EndOfDayStateMachine>), 93 },
            { typeof(StateMachineComponent<LightCutsceneStateMachine>), 93 },
            { typeof(StateMachineComponent<MainMenuStateMachine>), 93 },
            { typeof(StateMachineComponent<MonologueStateMachine>), 93 },
            { typeof(StateMachineComponent<MonologueUiStateMachine>), 93 },
            { typeof(StateMachineComponent<PauseMenuStateMachine>), 93 },
            { typeof(StateMachineComponent<RaceEndedCutscene>), 93 },
            { typeof(StateMachineComponent<SlideShowStateMachine>), 93 },
            { typeof(StateMachineComponent<TinderStateMachine>), 93 },
            { typeof(StateMachineComponent<TrueEndingStateMachine>), 93 },
            { typeof(InteractiveComponent<GiveBoostInteraction>), 94 },
            { typeof(InteractiveComponent<HonkOnInteract>), 94 },
            { typeof(InteractiveComponent<LdMonologueInteraction>), 94 },
            { typeof(InteractiveComponent<PlayCustomSoundInteraction>), 94 },
            { typeof(InteractiveComponent<SpawnNearMissInteraction>), 94 },
            { typeof(InteractiveComponent<TriggerOnPanicInteraction>), 94 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> ComponentsIndex => _componentsIndex;

        private static readonly ImmutableDictionary<Type, int> _messagesIndex = new Dictionary<Type, int>()
        {
            { typeof(AnimationCompleteMessage), 96 },
            { typeof(CollidedWithMessage), 97 },
            { typeof(FatalDamageMessage), 98 },
            { typeof(HighlightMessage), 99 },
            { typeof(InteractMessage), 100 },
            { typeof(InteractorMessage), 101 },
            { typeof(IsInsideOfMessage), 102 },
            { typeof(NextDialogMessage), 103 },
            { typeof(OnActorEnteredOrExitedMessage), 104 },
            { typeof(OnInteractExitMessage), 105 },
            { typeof(OnTriggerEnteredMessage), 106 },
            { typeof(PathNotPossibleMessage), 107 },
            { typeof(PickChoiceMessage), 108 },
            { typeof(TouchedGroundMessage), 109 },
            { typeof(AgentInputMessage), 132 },
            { typeof(AgentReleaseInputMessage), 133 },
            { typeof(CarCollisionMessage), 134 },
            { typeof(DialogueMessage), 135 },
            { typeof(TargetEntityMessage), 136 },
            { typeof(TextMessage), 137 }
        }.ToImmutableDictionary();

        protected override ImmutableDictionary<Type, int> MessagesIndex => _messagesIndex;
    }
}